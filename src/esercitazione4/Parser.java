
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import esercitazione4.Node.*;
import esercitazione4.Expressions.*;
import esercitazione4.Expressions.BinaryOp.*;
import esercitazione4.Expressions.UnaryOp.*;
import esercitazione4.Statement.*;
import esercitazione4.Type.*;
import esercitazione4.Const.*;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\004" +
    "\000\002\003\005\000\002\003\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\010\005\000\002\010\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\006\012\000\002\017\006\000\002\017\005\000\002\013" +
    "\002\000\002\013\003\000\002\014\003\000\002\014\005" +
    "\000\002\023\004\000\002\023\005\000\002\016\003\000" +
    "\002\016\003\000\002\021\002\000\002\021\004\000\002" +
    "\022\003\000\002\022\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\025\004\000\002\025\005\000" +
    "\002\025\004\000\002\026\007\000\002\020\002\000\002" +
    "\020\004\000\002\033\006\000\002\027\012\000\002\030" +
    "\005\000\002\030\004\000\002\024\003\000\002\024\005" +
    "\000\002\031\006\000\002\031\006\000\002\032\005\000" +
    "\002\034\006\000\002\034\005\000\002\035\003\000\002" +
    "\035\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\011\004\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\022\004\ufffd\010\013\011\005\012\015\013" +
    "\012\014\017\015\007\021\016\001\002\000\004\063\243" +
    "\001\002\000\006\037\ufff9\063\ufff9\001\002\000\004\002" +
    "\242\001\002\000\006\037\ufff8\063\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\005\012\015\013\012\014" +
    "\017\015\007\021\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\005\012\015\013\012\014\017\015\007\021" +
    "\016\001\002\000\006\037\ufff6\063\ufff6\001\002\000\004" +
    "\063\221\001\002\000\004\004\215\001\002\000\006\037" +
    "\ufff7\063\ufff7\001\002\000\004\063\020\001\002\000\006" +
    "\037\ufff5\063\ufff5\001\002\000\004\035\021\001\002\000" +
    "\020\011\005\012\015\013\012\014\017\015\007\022\026" +
    "\036\uffe5\001\002\000\004\063\030\001\002\000\004\036" +
    "\036\001\002\000\006\007\uffe3\036\uffe3\001\002\000\006" +
    "\007\034\036\uffe4\001\002\000\014\011\005\012\015\013" +
    "\012\014\017\015\007\001\002\000\004\063\030\001\002" +
    "\000\010\006\uffc9\007\uffc9\036\uffc9\001\002\000\010\006" +
    "\032\007\uffe0\036\uffe0\001\002\000\004\063\033\001\002" +
    "\000\014\006\uffc8\007\uffc8\032\uffc8\036\uffc8\060\uffc8\001" +
    "\002\000\016\011\005\012\015\013\012\014\017\015\007" +
    "\022\026\001\002\000\006\007\uffe2\036\uffe2\001\002\000" +
    "\004\041\037\001\002\000\016\011\005\012\015\013\012" +
    "\014\017\015\007\016\042\001\002\000\004\037\043\001" +
    "\002\000\004\037\uffdf\001\002\000\004\037\uffde\001\002" +
    "\000\034\010\013\011\005\012\015\013\012\014\017\015" +
    "\007\023\uffdd\024\uffdd\027\uffdd\035\uffdd\040\uffdd\042\uffdd" +
    "\063\uffdd\001\002\000\024\002\uffe8\004\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\021\uffe8\001\002" +
    "\000\020\023\051\024\055\027\050\035\053\040\070\042" +
    "\066\063\061\001\002\000\034\010\013\011\005\012\015" +
    "\013\012\014\017\015\007\023\uffdd\024\uffdd\027\uffdd\035" +
    "\uffdd\040\uffdd\042\uffdd\063\uffdd\001\002\000\020\023\uffdc" +
    "\024\uffdc\027\uffdc\035\uffdc\040\uffdc\042\uffdc\063\uffdc\001" +
    "\002\000\026\017\075\020\100\035\076\044\071\053\105" +
    "\063\103\064\072\065\102\066\104\067\074\001\002\000" +
    "\004\063\202\001\002\000\020\023\uffd4\024\uffd4\027\uffd4" +
    "\035\uffd4\040\uffd4\042\uffd4\063\uffd4\001\002\000\026\017" +
    "\075\020\100\035\076\044\071\053\105\063\103\064\072" +
    "\065\102\066\104\067\074\001\002\000\020\023\uffd9\024" +
    "\uffd9\027\uffd9\035\uffd9\040\uffd9\042\uffd9\063\uffd9\001\002" +
    "\000\026\017\075\020\100\035\076\044\071\053\105\063" +
    "\103\064\072\065\102\066\104\067\074\001\002\000\004" +
    "\005\167\001\002\000\004\040\166\001\002\000\004\005" +
    "\165\001\002\000\012\006\uffc9\032\uffc9\035\143\060\uffc9" +
    "\001\002\000\010\006\032\032\161\060\162\001\002\000" +
    "\004\005\160\001\002\000\020\023\051\024\055\027\050" +
    "\035\053\040\uffdb\042\066\063\061\001\002\000\004\005" +
    "\156\001\002\000\030\005\077\017\075\020\100\035\076" +
    "\044\071\053\105\063\103\064\072\065\102\066\104\067" +
    "\074\001\002\000\020\023\uffd8\024\uffd8\027\uffd8\035\uffd8" +
    "\040\uffd8\042\uffd8\063\uffd8\001\002\000\044\002\uffe6\004" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\035\uffe6\040" +
    "\uffe6\042\uffe6\063\uffe6\001\002\000\026\017\075\020\100" +
    "\035\076\044\071\053\105\063\103\064\072\065\102\066" +
    "\104\067\074\001\002\000\050\005\uffbd\006\uffbd\025\uffbd" +
    "\031\uffbd\036\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\061\uffbd\062\uffbd\001\002\000\040\005\154\043" +
    "\113\044\107\045\120\046\117\047\111\050\122\051\110" +
    "\052\124\054\123\055\115\056\116\057\112\061\114\062" +
    "\121\001\002\000\050\005\uffbc\006\uffbc\025\uffbc\031\uffbc" +
    "\036\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\050\005\uffc0\006\uffc0\025" +
    "\uffc0\031\uffc0\036\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\062\uffc0\001\002\000\026\017\075" +
    "\020\100\035\076\044\071\053\105\063\103\064\072\065" +
    "\102\066\104\067\074\001\002\000\020\023\uffd1\024\uffd1" +
    "\027\uffd1\035\uffd1\040\uffd1\042\uffd1\063\uffd1\001\002\000" +
    "\050\005\uffbf\006\uffbf\025\uffbf\031\uffbf\036\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf" +
    "\001\002\000\050\005\uffb9\006\uffb9\025\uffb9\031\uffb9\036" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061" +
    "\uffb9\062\uffb9\001\002\000\050\005\uffbe\006\uffbe\025\uffbe" +
    "\031\uffbe\036\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\061\uffbe\062\uffbe\001\002\000\052\005\uffba\006" +
    "\uffba\025\uffba\031\uffba\035\143\036\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba\001\002" +
    "\000\050\005\uffbb\006\uffbb\025\uffbb\031\uffbb\036\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\062" +
    "\uffbb\001\002\000\026\017\075\020\100\035\076\044\071" +
    "\053\105\063\103\064\072\065\102\066\104\067\074\001" +
    "\002\000\050\005\uffa9\006\uffa9\025\uffa9\031\uffa9\036\uffa9" +
    "\043\113\044\107\045\120\046\117\047\111\050\122\051" +
    "\uffa9\052\uffa9\054\123\055\115\056\116\057\112\061\114" +
    "\062\121\001\002\000\026\017\075\020\100\035\076\044" +
    "\071\053\105\063\103\064\072\065\102\066\104\067\074" +
    "\001\002\000\026\017\075\020\100\035\076\044\071\053" +
    "\105\063\103\064\072\065\102\066\104\067\074\001\002" +
    "\000\026\017\075\020\100\035\076\044\071\053\105\063" +
    "\103\064\072\065\102\066\104\067\074\001\002\000\026" +
    "\017\075\020\100\035\076\044\071\053\105\063\103\064" +
    "\072\065\102\066\104\067\074\001\002\000\026\017\075" +
    "\020\100\035\076\044\071\053\105\063\103\064\072\065" +
    "\102\066\104\067\074\001\002\000\026\017\075\020\100" +
    "\035\076\044\071\053\105\063\103\064\072\065\102\066" +
    "\104\067\074\001\002\000\026\017\075\020\100\035\076" +
    "\044\071\053\105\063\103\064\072\065\102\066\104\067" +
    "\074\001\002\000\026\017\075\020\100\035\076\044\071" +
    "\053\105\063\103\064\072\065\102\066\104\067\074\001" +
    "\002\000\026\017\075\020\100\035\076\044\071\053\105" +
    "\063\103\064\072\065\102\066\104\067\074\001\002\000" +
    "\026\017\075\020\100\035\076\044\071\053\105\063\103" +
    "\064\072\065\102\066\104\067\074\001\002\000\026\017" +
    "\075\020\100\035\076\044\071\053\105\063\103\064\072" +
    "\065\102\066\104\067\074\001\002\000\026\017\075\020" +
    "\100\035\076\044\071\053\105\063\103\064\072\065\102" +
    "\066\104\067\074\001\002\000\026\017\075\020\100\035" +
    "\076\044\071\053\105\063\103\064\072\065\102\066\104" +
    "\067\074\001\002\000\026\017\075\020\100\035\076\044" +
    "\071\053\105\063\103\064\072\065\102\066\104\067\074" +
    "\001\002\000\050\005\uffb1\006\uffb1\025\uffb1\031\uffb1\036" +
    "\uffb1\043\113\044\107\045\120\046\117\047\111\050\122" +
    "\051\110\052\uffb1\054\123\055\115\056\116\057\112\061" +
    "\114\062\121\001\002\000\034\005\uffae\006\uffae\025\uffae" +
    "\031\uffae\036\uffae\043\113\044\107\045\120\046\117\047" +
    "\111\050\122\051\uffae\052\uffae\001\002\000\050\005\uffb2" +
    "\006\uffb2\025\uffb2\031\uffb2\036\uffb2\043\uffb2\044\uffb2\045" +
    "\120\046\117\047\111\050\uffb2\051\uffb2\052\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\061\uffb2\062\uffb2\001\002\000" +
    "\034\005\uffab\006\uffab\025\uffab\031\uffab\036\uffab\043\113" +
    "\044\107\045\120\046\117\047\111\050\122\051\uffab\052" +
    "\uffab\001\002\000\050\005\uffb6\006\uffb6\025\uffb6\031\uffb6" +
    "\036\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\111\050" +
    "\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\001\002\000\050\005\uffb5\006\uffb5\025" +
    "\uffb5\031\uffb5\036\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\111\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\001\002\000\034\005\uffb0" +
    "\006\uffb0\025\uffb0\031\uffb0\036\uffb0\043\113\044\107\045" +
    "\120\046\117\047\111\050\122\051\uffb0\052\uffb0\001\002" +
    "\000\034\005\uffad\006\uffad\025\uffad\031\uffad\036\uffad\043" +
    "\113\044\107\045\120\046\117\047\111\050\122\051\uffad" +
    "\052\uffad\001\002\000\034\005\uffac\006\uffac\025\uffac\031" +
    "\uffac\036\uffac\043\113\044\107\045\120\046\117\047\111" +
    "\050\122\051\uffac\052\uffac\001\002\000\050\005\uffb8\006" +
    "\uffb8\025\uffb8\031\uffb8\036\uffb8\043\uffb8\044\uffb8\045\120" +
    "\046\117\047\111\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8\001\002\000\034" +
    "\005\uffaf\006\uffaf\025\uffaf\031\uffaf\036\uffaf\043\113\044" +
    "\107\045\120\046\117\047\111\050\122\051\uffaf\052\uffaf" +
    "\001\002\000\050\005\uffb3\006\uffb3\025\uffb3\031\uffb3\036" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\111\050\uffb3" +
    "\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\050\005\uffb4\006\uffb4\025\uffb4" +
    "\031\uffb4\036\uffb4\043\113\044\107\045\120\046\117\047" +
    "\111\050\122\051\uffb4\052\uffb4\054\123\055\115\056\116" +
    "\057\112\061\114\062\121\001\002\000\050\005\uffb7\006" +
    "\uffb7\025\uffb7\031\uffb7\036\uffb7\043\uffb7\044\uffb7\045\120" +
    "\046\117\047\111\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7\001\002\000\030" +
    "\017\075\020\100\035\076\036\146\044\071\053\105\063" +
    "\103\064\072\065\102\066\104\067\074\001\002\000\044" +
    "\005\uffc2\006\150\036\uffc2\043\113\044\107\045\120\046" +
    "\117\047\111\050\122\051\110\052\124\054\123\055\115" +
    "\056\116\057\112\061\114\062\121\001\002\000\004\036" +
    "\147\001\002\000\050\005\uffc3\006\uffc3\025\uffc3\031\uffc3" +
    "\036\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\061\uffc3\062\uffc3\001\002\000\050\005\uffc4\006\uffc4\025" +
    "\uffc4\031\uffc4\036\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\061\uffc4\062\uffc4\001\002\000\026\017\075" +
    "\020\100\035\076\044\071\053\105\063\103\064\072\065" +
    "\102\066\104\067\074\001\002\000\006\005\uffc1\036\uffc1" +
    "\001\002\000\040\036\153\043\113\044\107\045\120\046" +
    "\117\047\111\050\122\051\110\052\124\054\123\055\115" +
    "\056\116\057\112\061\114\062\121\001\002\000\050\005" +
    "\uffa8\006\uffa8\025\uffa8\031\uffa8\036\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8\001\002" +
    "\000\020\023\uffd2\024\uffd2\027\uffd2\035\uffd2\040\uffd2\042" +
    "\uffd2\063\uffd2\001\002\000\050\005\uffaa\006\uffaa\025\uffaa" +
    "\031\uffaa\036\uffaa\043\uffaa\044\uffaa\045\120\046\117\047" +
    "\111\050\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\061\uffaa\062\uffaa\001\002\000\020\023\uffd7\024" +
    "\uffd7\027\uffd7\035\uffd7\040\uffd7\042\uffd7\063\uffd7\001\002" +
    "\000\004\040\uffda\001\002\000\020\023\uffd6\024\uffd6\027" +
    "\uffd6\035\uffd6\040\uffd6\042\uffd6\063\uffd6\001\002\000\006" +
    "\005\uffca\067\164\001\002\000\026\017\075\020\100\035" +
    "\076\044\071\053\105\063\103\064\072\065\102\066\104" +
    "\067\074\001\002\000\004\005\uffc5\001\002\000\004\005" +
    "\uffcb\001\002\000\020\023\uffd3\024\uffd3\027\uffd3\035\uffd3" +
    "\040\uffd3\042\uffd3\063\uffd3\001\002\000\044\002\uffe7\004" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\035\uffe7\040" +
    "\uffe7\042\uffe7\063\uffe7\001\002\000\020\023\uffd5\024\uffd5" +
    "\027\uffd5\035\uffd5\040\uffd5\042\uffd5\063\uffd5\001\002\000" +
    "\040\025\171\043\113\044\107\045\120\046\117\047\111" +
    "\050\122\051\110\052\124\054\123\055\115\056\116\057" +
    "\112\061\114\062\121\001\002\000\004\037\043\001\002" +
    "\000\022\023\uffcf\024\uffcf\026\173\027\uffcf\035\uffcf\040" +
    "\uffcf\042\uffcf\063\uffcf\001\002\000\004\037\043\001\002" +
    "\000\020\023\uffd0\024\uffd0\027\uffd0\035\uffd0\040\uffd0\042" +
    "\uffd0\063\uffd0\001\002\000\020\023\uffce\024\uffce\027\uffce" +
    "\035\uffce\040\uffce\042\uffce\063\uffce\001\002\000\004\036" +
    "\177\001\002\000\006\033\200\034\201\001\002\000\004" +
    "\005\uffc7\001\002\000\004\005\uffc6\001\002\000\004\060" +
    "\203\001\002\000\004\065\204\001\002\000\004\030\205" +
    "\001\002\000\004\065\206\001\002\000\004\031\207\001" +
    "\002\000\004\037\043\001\002\000\020\023\uffcc\024\uffcc" +
    "\027\uffcc\035\uffcc\040\uffcc\042\uffcc\063\uffcc\001\002\000" +
    "\040\031\212\043\113\044\107\045\120\046\117\047\111" +
    "\050\122\051\110\052\124\054\123\055\115\056\116\057" +
    "\112\061\114\062\121\001\002\000\004\037\043\001\002" +
    "\000\020\023\uffcd\024\uffcd\027\uffcd\035\uffcd\040\uffcd\042" +
    "\uffcd\063\uffcd\001\002\000\010\006\032\007\uffe1\036\uffe1" +
    "\001\002\000\004\021\016\001\002\000\022\002\ufffd\010" +
    "\013\011\005\012\015\013\012\014\017\015\007\021\016" +
    "\001\002\000\004\002\001\001\002\000\022\002\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\021\ufffc" +
    "\001\002\000\004\060\236\001\002\000\006\005\224\006" +
    "\223\001\002\000\004\063\225\001\002\000\042\002\ufffa" +
    "\004\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\021\ufffa\023\ufffa\024\ufffa\027\ufffa\035\ufffa\040\ufffa" +
    "\042\ufffa\063\ufffa\001\002\000\004\060\226\001\002\000" +
    "\016\017\231\020\232\064\233\065\230\066\235\067\227" +
    "\001\002\000\006\005\uffea\006\uffea\001\002\000\006\005" +
    "\uffee\006\uffee\001\002\000\006\005\uffec\006\uffec\001\002" +
    "\000\006\005\uffeb\006\uffeb\001\002\000\006\005\uffed\006" +
    "\uffed\001\002\000\006\005\uffef\006\uffef\001\002\000\006" +
    "\005\uffe9\006\uffe9\001\002\000\016\017\231\020\232\064" +
    "\233\065\230\066\235\067\227\001\002\000\006\005\ufff0" +
    "\006\ufff0\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\002\000\001\002" +
    "\000\010\005\ufff4\006\ufff4\060\252\001\002\000\006\005" +
    "\246\006\245\001\002\000\004\063\247\001\002\000\042" +
    "\002\ufffb\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\021\ufffb\023\ufffb\024\ufffb\027\ufffb\035\ufffb" +
    "\040\ufffb\042\ufffb\063\ufffb\001\002\000\010\005\ufff3\006" +
    "\ufff3\060\250\001\002\000\026\017\075\020\100\035\076" +
    "\044\071\053\105\063\103\064\072\065\102\066\104\067" +
    "\074\001\002\000\042\005\ufff1\006\ufff1\043\113\044\107" +
    "\045\120\046\117\047\111\050\122\051\110\052\124\054" +
    "\123\055\115\056\116\057\112\061\114\062\121\001\002" +
    "\000\026\017\075\020\100\035\076\044\071\053\105\063" +
    "\103\064\072\065\102\066\104\067\074\001\002\000\042" +
    "\005\ufff2\006\ufff2\043\113\044\107\045\120\046\117\047" +
    "\111\050\122\051\110\052\124\054\123\055\115\056\116" +
    "\057\112\061\114\062\121\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\005\003\010\004\013\006\007\015" +
    "\003\001\001\000\004\007\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\010\004" +
    "\240\006\007\015\003\001\001\000\012\003\010\004\237" +
    "\006\007\015\003\001\001\000\002\001\001\000\004\010" +
    "\221\001\001\000\004\005\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\022\014\024\015\021\023\023\001\001\000\004" +
    "\024\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\026\001\001\000\004\024\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\021\023\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\040\016" +
    "\037\001\001\000\004\017\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\045\015\003\021\044\001" +
    "\001\000\002\001\001\000\026\022\056\024\061\025\063" +
    "\026\053\027\066\030\064\031\062\032\055\033\051\034" +
    "\057\001\001\000\010\003\045\015\003\021\046\001\001" +
    "\000\002\001\001\000\006\011\210\034\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\143\034\100" +
    "\035\175\001\001\000\002\001\001\000\006\011\167\034" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\156\024\061\025\063\026\053\027\066" +
    "\030\064\031\062\032\055\033\051\034\057\001\001\000" +
    "\002\001\001\000\006\011\072\034\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\154\034\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\151\034\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\105\034\100\001\001\000\002\001\001\000\006\011\141" +
    "\034\100\001\001\000\006\011\140\034\100\001\001\000" +
    "\006\011\137\034\100\001\001\000\006\011\136\034\100" +
    "\001\001\000\006\011\135\034\100\001\001\000\006\011" +
    "\134\034\100\001\001\000\006\011\133\034\100\001\001" +
    "\000\006\011\132\034\100\001\001\000\006\011\131\034" +
    "\100\001\001\000\006\011\130\034\100\001\001\000\006" +
    "\011\127\034\100\001\001\000\006\011\126\034\100\001" +
    "\001\000\006\011\125\034\100\001\001\000\006\011\124" +
    "\034\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\143\034" +
    "\100\035\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\143\034" +
    "\100\035\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\143\034\100\035\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\171\001\001\000\004\020\173\001\001\000\004\017\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\217" +
    "\001\001\000\012\003\010\004\216\006\007\015\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\250\034\100\001\001\000\002\001\001" +
    "\000\006\011\252\034\100\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList declList1 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp main = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList2 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<VarDeclOp> listVarDecl=declList1.getVarDeclOpList();
        ArrayList<FunDeclOp> listFun = declList1.getFunDeclOpList();
        listFun.add(main);
        listVarDecl.addAll(declList2.getVarDeclOpList());
        listFun.addAll(declList2.getFunDeclOpList());
        RESULT = new ProgramOp(listVarDecl, listFun);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              DeclList RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<VarDeclOp> varDeclOpList = declList.getVarDeclOpList();
        varDeclOpList.add(0, varDecl);
        RESULT = declList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              DeclList RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp funDecl = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<FunDeclOp> funDeclOpList = declList.getFunDeclOpList();
        funDeclOpList.add(0, funDecl);
        RESULT = declList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              DeclList RESULT =null;
		
        RESULT= new DeclList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              FunDeclOp RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOp funDecl = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        funDecl.setMain(true);
        RESULT=funDecl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdExpr> idList = (ArrayList<IdExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT= new VarDeclOp(type,idList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int obbListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int obbListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdExpr> obbList = (ArrayList<IdExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT= new VarDeclOp(new TypeOp(Type.VAR),obbList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.BOOL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.REAL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<IdExpr> idExprList= new ArrayList<>();
        idExprList.add(new IdExpr(new Id(id)));
        RESULT= idExprList;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdExpr> RESULT =null;
		int idExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IdExpr> idExprList = (ArrayList<IdExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idExprList.add(new IdExpr(new Id(id)));
        RESULT= idExprList;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<IdExpr> idExprList= new ArrayList<>();
        idExprList.add(new IdExpr(new Id(id), expr));
        RESULT= idExprList ;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdExpr> RESULT =null;
		int idExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdExpr> idExprList = (ArrayList<IdExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idExprList.add(new IdExpr(new Id(id), expr));
        RESULT= idExprList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstOp cons = (ConstOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<IdExpr> idExprList= new ArrayList<>();
        idExprList.add(new IdExpr(new Id(id), (Expr) cons));
        RESULT= idExprList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdExpr> RESULT =null;
		int idExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdExpr> idExprList = (ArrayList<IdExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstOp cons = (ConstOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          idExprList.add(new IdExpr(new Id(id), (Expr) cons));
          RESULT= idExprList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.INTEGER_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.REAL_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		RESULT=new ConstOp(Const.TRUE_CONST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		RESULT=new ConstOp(Const.FALSE_CONST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.STRING_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.CHAR_CONST+": ", lessema);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramDecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramDecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<ParDeclOp> paramDecList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 if (paramDecList==null)
                    RESULT= new FunDeclOp(new Id(id),type,body);
                else
                    RESULT= new FunDeclOp(new Id(id),paramDecList,type,body);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT= new BodyOp(varDeclList,statList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= LBRAC VarDeclList RBRAC 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new BodyOp(varDeclList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOp> RESULT =null;
		RESULT = new ArrayList<ParDeclOp>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDeclOp> listParams = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=listParams;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<ParDeclOp> listParDecl= new ArrayList<>();
        listParDecl.add(0,parDecl);
        RESULT= listParDecl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int listParDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listParDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDeclOp> listParDecl = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        listParDecl.add(parDecl);
        RESULT= listParDecl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new ParDeclOp(false,type,idList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new ParDeclOp(true,type,idList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= Type 
            {
              TypeOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= VOID 
            {
              TypeOp RESULT =null;
		RESULT=new TypeOp(Type.VOID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		RESULT = new ArrayList<VarDeclOp>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            varDeclList.add(0, varDecl);
            RESULT=varDeclList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(stat!=null){
            ArrayList<Statement> statList=new ArrayList<>();
            statList.add(0, stat);
            RESULT= statList;
        }else{
            RESULT=null;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        statList.add(0, stat);
        RESULT = statList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IfStat 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ifStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ForStat 
            {
              Statement RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatOp forStat = (ForStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=forStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatOp readStat = (ReadStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=readStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatOp writeStat = (WriteStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=writeStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatOp assignStat = (AssignStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=assignStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WhileStat 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatOp whileStat = (WhileStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=whileStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= FunCall SEMI 
            {
              Statement RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCallOpExpr funCall = (FunCallOpExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(funCall.getExprList()!=null){
        RESULT=new FunCallOpStat(funCall.getId(),funCall.getExprList());
    } else {
        RESULT= new FunCallOpStat(funCall.getId());
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new ReturnStatOp(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Statement RESULT =null;
		RESULT= new ReturnStatOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp el = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (el!=null)
            RESULT= new IfStatOp(expr,body,el);
        else
            RESULT= new IfStatOp(expr,body);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=body;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT= new WhileStatOp(expr,body);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cons1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cons1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cons1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cons2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cons2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cons2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT= new ForStatOp(new Id(id), new ConstOp(Const.INTEGER_CONST+": ", cons1),new ConstOp(Const.INTEGER_CONST+": ", cons2),body);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT= new ReadStatOp(idList,new ConstOp(Const.STRING_CONST+": ", lessema));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ 
            {
              ReadStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    RESULT= new ReadStatOp(idList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Id> idList = new ArrayList<>();
        idList.add(new Id(id));
        RESULT = idList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idList.add(new Id(id));
        RESULT = idList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatOp RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	        RESULT= new WriteStatOp(false,eList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatOp RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	        RESULT= new WriteStatOp(true,eList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new AssignStatOp(idList,eList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCallOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT= new FunCallOpExpr(new Id(id),eList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	        RESULT= new FunCallOpExpr(new Id(id), new ArrayList<>());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Expr> eList= new ArrayList<>();
        eList.add(0, expr);
        RESULT= eList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        eList.add(0,expr);
        RESULT= eList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT= new ConstOp(Const.TRUE_CONST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT= new ConstOp(Const.FALSE_CONST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ConstOp(Const.INTEGER_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ConstOp(Const.REAL_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.STRING_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new ConstOp(Const.CHAR_CONST+": ", lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= ID 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new Id(lessema);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCallOpExpr funCall = (FunCallOpExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= funCall;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AddOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new DiffOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new MulOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new DivOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AndOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new PowOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new StrCatOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new OrOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new GTOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new GEOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LTOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LEOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new EQOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new NEOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new UminusOp(e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new NotOp(e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new ParOp(e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
